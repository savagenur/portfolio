name: CI & Vercel Deploy

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Cancel older runs when new commits arrive on the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Lint • Types • Test • Build (Next.js)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Type check
        run: npm run typecheck --if-present

      - name: Unit tests
        run: npm test --if-present

      - name: Build (Next.js compile check)
        run: npm run build

  deploy:
    name: Deploy via Vercel
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write   # needed to comment Preview URL on PRs
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    if: ${{ needs.ci.result == 'success' }}
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      # Pull Vercel project linking + env vars for the right target
      - name: Vercel Pull (Preview)
        if: github.event_name == 'pull_request'
        run: npx vercel pull --yes --environment=preview --token $VERCEL_TOKEN

      - name: Vercel Pull (Production)
        if: github.ref == 'refs/heads/main'
        run: npx vercel pull --yes --environment=production --token $VERCEL_TOKEN

      # Build the deployable artifact
      - name: Build (Vercel Preview)
        if: github.event_name == 'pull_request'
        run: npx vercel build --token $VERCEL_TOKEN

      - name: Build (Vercel Production)
        if: github.ref == 'refs/heads/main'
        run: npx vercel build --prod --token $VERCEL_TOKEN

      # Deploy the prebuilt artifact and capture the URL
      - name: Deploy (Preview)
        id: deploy
        if: github.event_name == 'pull_request'
        run: |
          URL=$(npx vercel deploy --prebuilt --token $VERCEL_TOKEN)
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Deploy (Production)
        id: deploy_prod
        if: github.ref == 'refs/heads/main'
        run: |
          URL=$(npx vercel deploy --prebuilt --prod --token $VERCEL_TOKEN)
          echo "url=$URL" >> $GITHUB_OUTPUT

      # Comment Preview URL on the PR for reviewers
      - name: Comment Preview URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const url = core.getInput('url', { required: false }) || process.env.DEPLOY_URL;
            const previewUrl = '${{ steps.deploy.outputs.url }}';
            if (previewUrl) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `✅ Preview deployed: ${previewUrl}`
              });
            }

      - name: Echo URL (logs)
        run: |
          echo "Preview URL:  ${{ steps.deploy.outputs.url }}"
          echo "Production URL: ${{ steps.deploy_prod.outputs.url }}"
